@startuml enhanced_payment_gateway_flow

actor Cliente
participant "API Gateway" as Gateway
database "Tabela Anti-Duplicação" as AntiDup
queue "order_queue" as OrderQueue
participant "Processador" as Processor
database "Tabela Pedidos" as Orders
database "Tabela Pagamentos\n(register_payment_request)" as Payments
queue "process-purchases" as ProcessPurchases
queue "payment_retry" as PaymentRetry
queue "payment_dlq" as PaymentDLQ

Cliente -> Gateway: POST /pedido {user_id, itens}
activate Gateway

Gateway -> AntiDup: Verifica pedidos recentes\n(user_id, últimos 2m)
AntiDup --> Gateway: Existe? 

alt Pedido similar existe
    Gateway --> Cliente: 409 Conflict
else 
    Gateway -> AntiDup: Insere registro\n(id_pedido, user_id, status: "PENDING")
    Gateway -> OrderQueue: Envia mensagem\n**Headers:**\nretry_count=0, message_id=UUID
    Gateway --> Cliente: 202 Accepted
end

deactivate Gateway

...

OrderQueue -> Processor: Consome mensagem
activate Processor

Processor -> AntiDup: Busca status\n(id_pedido)
AntiDup --> Processor: Status

alt Status já é "PROCESSED"
    Processor -> Processor: **Ignora mensagem (idempotência)**
    Processor --> OrderQueue: Commit offset
else
    Processor -> Orders: Registra pedido
    Processor -> AntiDup: Atualiza status: "PROCESSED"
    
    ' *** REGISTRO DE PAGAMENTO COM RETRY_COUNT ***
    Processor -> Payments: Cria registro pagamento\n**retry_count=0**\nstatus="PENDING"
    Processor -> ProcessPurchases: Envia pagamento\n**Headers:**\npayment_id=ID
    Processor -> OrderQueue: Commit offset
end

...

group Tratamento de Erros
    Processor -> Processor: Detectou erro\n(consumer/producer/pagamento)
    
    ' *** ATUALIZAÇÃO DO CONTADOR DE RETENTATIVAS ***
    Processor -> Payments: Busca registro pagamento\n(payment_id)
    Payments --> Processor: Registro com retry_count
    Processor -> Payments: Atualiza retry_count = retry_count + 1
    
    alt retry_count < MAX_RETRIES
        Processor -> Processor: Calcula delay exponencial\nbaseado em retry_count
        Processor -> PaymentRetry: Publica com novo header\n**retry_count=novo_valor**
        Processor -> OrderQueue: Commit offset
    else
        Processor -> Payments: Atualiza status="FAILED"
        Processor -> PaymentDLQ: Publica mensagem\n**com retry_count final**
        Processor -> OrderQueue: Commit offset
    end
end

deactivate Processor

...

PaymentRetry --> Processor: Mensagem re-agendada\n(após delay)
activate Processor

' *** FLUXO DE REPROCESSAMENTO ***
Processor -> Payments: Busca registro\n(payment_id)
Payments --> Processor: Dados pagamento + retry_count
Processor -> Processor: Reprocessamento\ncom lógica específica\npara retentativas
Processor -> ProcessPurchases: Reenvia pagamento\n**Headers:**\nretry_count=atual

...

@enduml