@startuml payment_gateway_flow

actor Cliente
participant "API Gateway" as Gateway
database "Tabela Anti-Duplicação" as AntiDup
queue "order_queue" as OrderQueue
participant "Processador" as Processor
database "Tabela Pedidos" as Orders
queue "process-purchases" as ProcessPurchases
queue "purchases-processed" as PurchasesProcessed
queue "payment_retry" as PaymentRetry
queue "payment_dlq" as PaymentDLQ
participant "Sistema de Monitoramento" as Monitoring

Cliente -> Gateway: POST /pedido {user_id, itens}
activate Gateway

Gateway -> AntiDup: Verifica pedidos recentes\n(user_id, últimos 2m)
AntiDup --> Gateway: Existe? 

alt Pedido similar existe
    Gateway --> Cliente: 409 Conflict
else 
    Gateway -> AntiDup: Insere registro\n(id_pedido, user_id, status: "PENDING")
    Gateway -> OrderQueue: Envia mensagem\n**Headers:**\nretry_count=0, message_id=UUID
    Gateway --> Cliente: 202 Accepted
end

deactivate Gateway

...

OrderQueue -> Processor: Consome mensagem
activate Processor

Processor -> AntiDup: Busca status\n(id_pedido)
AntiDup --> Processor: Status

alt Status já é "PROCESSED"
    Processor -> Processor: **Ignora mensagem (idempotência)**
    Processor -> Monitoring: metric_processed_duplicate_total++
    Processor --> OrderQueue: Commit offset
else
    Processor -> Orders: Registra pedido
    Processor -> AntiDup: Atualiza status: "PROCESSED"
    Processor -> ProcessPurchases: Envia pagamento\n**Headers:**\nretry_count=0, parent_id=message_id
    Processor -> Monitoring: metric_processed_success_total++
    Processor -> OrderQueue: Commit offset
end

...

group Tratamento de Erros (Unificado)
    Processor -> Processor: Detectou erro\n(consumer/producer/pagamento)
    Processor -> Processor: Obtém header\nretry_count (default=0)
    alt retry_count < MAX_RETRIES
        Processor -> Processor: Incrementa retry_count\nNovo delay exponencial
        Processor -> PaymentRetry: Publica com novo header\ne delay calculado
        Processor -> Monitoring: metric_retry_total++
        Processor -> OrderQueue: Commit offset
    else
        Processor -> PaymentDLQ: Publica mensagem\n**Headers:**\nerror_details=...
        Processor -> Monitoring: metric_dlq_total++
        Processor -> OrderQueue: Commit offset
    end
end

deactivate Processor

...

PaymentRetry --> Processor: Mensagem re-agendada\n(após delay configurado)
Processor -> Processor: Reprocessamento\nautomático

@enduml